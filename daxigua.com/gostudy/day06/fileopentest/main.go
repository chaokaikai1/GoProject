package main

import (
	"bufio"
	"fmt"
	"io"
	"io/ioutil"
	"os"
)

func readFile1() {
	fileobj, err := os.Open("./main.go")
	if err != nil {
		fmt.Printf("open file is error ,err:%v", err)
		return
	}
	defer fileobj.Close() //函数执行结束关闭文件
	//读文件 指定每次读取的长度
	//tmp := make([]byte, 128) //make声明
	var tmp [128]byte
	for {
		n, err := fileobj.Read(tmp[:])
		if err == io.EOF {
			fmt.Printf("read over")
			return
		}
		if err != nil {
			fmt.Printf("read file is error ,err:%v", err)
			return
		}
		if n < 128 {
			return
		}
		//fmt.Printf("read  length is %d \n", n)
		fmt.Println(string(tmp[:n]))
	}
}

func readFileByBufio() {
	fileObj, err := os.Open("./main.go")
	if err != nil {
		fmt.Printf("open file is error ,err:%v", err)
		return
	}
	defer fileObj.Close()
	//创建reader对象
	reader := bufio.NewReader(fileObj)
	for {
		line, err := reader.ReadString('\n')
		if err == io.EOF {
			fmt.Printf("read  over")
			return
		}
		if err != nil {
			fmt.Printf("read file is error ,err:%v", err)
			return
		}
		fmt.Printf(line)
	}
}

func readFileByIoUtil() {
	content, err := ioutil.ReadFile("./main.go")
	if err != nil {
		fmt.Printf("read file is error ,err:%v", err)
		return
	}
	fmt.Println(string(content))
}
func main() {
	//readFile1()
	//readFileByBufio()
	readFileByIoUtil()
}
